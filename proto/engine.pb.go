// Code generated by protoc-gen-go. DO NOT EDIT.
// source: engine.proto

/*
Package browser is a generated protocol buffer package.

It is generated from these files:
	engine.proto

It has these top-level messages:
	Message
*/
package browser

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import browser_layout "github.com/What-If-I/gowsomebrowser/proto/layout"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "browser.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EngineService service

type EngineServiceClient interface {
	Connect(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	SendLayout(ctx context.Context, in *browser_layout.Grid, opts ...grpc.CallOption) (*Message, error)
}

type engineServiceClient struct {
	cc *grpc.ClientConn
}

func NewEngineServiceClient(cc *grpc.ClientConn) EngineServiceClient {
	return &engineServiceClient{cc}
}

func (c *engineServiceClient) Connect(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/browser.EngineService/connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) SendLayout(ctx context.Context, in *browser_layout.Grid, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/browser.EngineService/sendLayout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EngineService service

type EngineServiceServer interface {
	Connect(context.Context, *Message) (*Message, error)
	SendLayout(context.Context, *browser_layout.Grid) (*Message, error)
}

func RegisterEngineServiceServer(s *grpc.Server, srv EngineServiceServer) {
	s.RegisterService(&_EngineService_serviceDesc, srv)
}

func _EngineService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/browser.EngineService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).Connect(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_SendLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(browser_layout.Grid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).SendLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/browser.EngineService/SendLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).SendLayout(ctx, req.(*browser_layout.Grid))
	}
	return interceptor(ctx, in, info, handler)
}

var _EngineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "browser.EngineService",
	HandlerType: (*EngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "connect",
			Handler:    _EngineService_Connect_Handler,
		},
		{
			MethodName: "sendLayout",
			Handler:    _EngineService_SendLayout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine.proto",
}

func init() { proto.RegisterFile("engine.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcd, 0x4b, 0xcf,
	0xcc, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x2a, 0xca, 0x2f, 0x2f, 0x4e,
	0x2d, 0x92, 0xe2, 0xc9, 0x49, 0xac, 0xcc, 0x2f, 0x2d, 0x81, 0x08, 0x2b, 0x29, 0x73, 0xb1, 0xfb,
	0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x49, 0x70, 0xb1, 0x27, 0xe7, 0xe7, 0x95, 0xa4, 0xe6,
	0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x46, 0x25, 0x5c, 0xbc, 0xae, 0x60,
	0xb3, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x74, 0xc1, 0x4a, 0xf3, 0x52, 0x93, 0x4b,
	0x84, 0x04, 0xf4, 0xa0, 0x06, 0xeb, 0x41, 0xcd, 0x91, 0xc2, 0x10, 0x11, 0x32, 0xe1, 0xe2, 0x2a,
	0x4e, 0xcd, 0x4b, 0xf1, 0x01, 0x5b, 0x2c, 0x24, 0x02, 0x97, 0x87, 0xba, 0xc4, 0xbd, 0x28, 0x33,
	0x05, 0x53, 0x97, 0x93, 0x10, 0x17, 0x1b, 0xc4, 0x56, 0x27, 0x28, 0x1d, 0xc0, 0x98, 0xc4, 0x06,
	0x76, 0xb5, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x10, 0x10, 0x89, 0xdc, 0x00, 0x00, 0x00,
}
